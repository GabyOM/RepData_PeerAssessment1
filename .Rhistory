lapply(strsplit(pride_prejudice, "\\s+"), function(x)
x[!(duplicated(x) | duplicated(x,fromLast=TRUE))])
View(pride_prejudice)
View(pride_prejudice)
View(cleaned_book)
View(cleaned_book)
View(tidy_book)
View(tidy_book)
book <- gutenberg_download(1342)
words <- book %>%
unnest_tokens(word, text)
nrow(words)
print("hello, world")
install.packages(c("shiny", "leaflet"))
library(shiny)
library(leaflet)
r_colors <- rgb(t(col2rgb(colors()) / 255))
names(r_colors) <- colors()
ui <- fluidPage(
leafletOutput("mymap"),
p(),
actionButton("recalc", "New points"),
p(),
textOutput("coordinates")
)
server <- function(input, output, session) {
points <- eventReactive(input$recalc, {
points = cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
output$coordinates <- renderText({
points
})
return(points)
}, ignoreNULL = FALSE)
observeEvent(input$Map_shape_click, { # update the location selectInput on map clicks
output$coordinates <- renderText({
"You have selected this"
})
})
output$mymap <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap = TRUE)
) %>%
addMarkers(data = points())
})
}
shinyApp(ui, server)
install.packages("RMySQL", type = "source")
library("RMySQL", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
library("RMySQL")
getdw()
setwd("~/GitHub/CourseraRepo")
data <- read.csv("./activity.csv")
data <- read.csv("./<ctivity/activity.csv")
data <- read.csv("./activity/activity.csv")
setwd("~/GitHub/CourseraRepo/RepData_PeerAssessment1")
data <- read.csv("./activity/activity.csv")
```{r, echo=FALSE, results='hide', warning=FALSE, message=FALSE}
library(ggplot2)
library(scales)
library(Hmisc)
opts_chunk$set(echo = TRUE)
library(ggplot2)
library(scales)
library(Hmisc)
head(data)
## Loading and preprocessing the data
data <- read.csv("./activity/activity.csv")
# remove NA in data
data <- data[ with (data, { !(is.na(steps)) } ), ]
head(data)
daily_steps<- summarise(dailysteps, total = sum(steps))
library(dplyr)
## Loading and preprocessing the data
data <- read.csv("./activity/activity.csv")
# remove NA in data
data <- data[ with (data, { !(is.na(steps)) } ), ]
head(data)
dailysteps <- group_by(data, date)
daily_steps<- summarise(dailysteps, total = sum(steps))
library(ggplot2)
library(scales)
library(Hmisc)
library(dplyr)
## Loading and preprocessing the data
data <- read.csv("./activity/activity.csv")
# remove NA in data
data <- data[ with (data, { !(is.na(steps)) } ), ]
head(data)
dailysteps <- group_by(data, date)
daily_steps<- summarise(dailysteps, total = sum(steps))
hist(daily_steps$total, main="Histogram of total number of steps per day",
xlab="Total number of steps in a day")
hist(daily_steps$total, main="Histogram of total number of steps per day",
xlab="Total number of steps in a day", breaks=100)
hist(daily_steps$total, main="Histogram of total number of steps per day",
xlab="Total number of steps in a day", breaks=80)
hist(daily_steps$total, main="Histogram of total number of steps per day",
xlab="Total number of steps in a day", breaks=20)
hist(daily_steps$total, main="Total steps per day",
xlab="Number of steps per day", breaks=20, col=rosybrown4 )
xlab="Number of steps per day", breaks=20, col="rosybrown4"")
hist(daily_steps$total, main="Total steps per day",
xlab="Number of steps per day", breaks=20, col="rosybrown4")
daily_steps
head(daily_steps)
median_daily_steps <- median(daily_steps)
mean_daily_steps <- mean(daily_steps)
median_daily_steps <- median(daily_steps)
median_daily_steps <- median(dailysteps)
sumary(daily_steps)
summary(daily_steps)
mean(daily_steps)
mean(daily_steps, na.rm=TRUE)
class(daily_steps)
daily_steps
mean(daily_steps$total)
summary(daily_steps)
mean_daily_steps <- mean(daily_steps$total)
median_daily_steps <- median(daily_steps$total)
median_daily_steps
summary(daily_steps)
mean_daily_steps <- mean(daily_steps$total)
mean_daily_steps
median_daily_steps <- median(daily_steps$total)
median_daily_steps
steps_interval <- aggregate(steps ~ interval, data, mean)
steps_interval
head(steps_interval)
plot(steps_interval$interval, steps_interval$steps, type='l',
main="Average number of steps over all days", xlab="Interval",
ylab="Average number of steps", col="rosybrown4")
steps_interval <- aggregate(steps ~ interval, data, mean)
head(steps_interval)
plot(steps_interval$interval, steps_interval$steps, type='l',
main="Average number of steps over all days", xlab="Interval",
ylab="Average number of steps", col="rosybrown4")
steps_interval <- aggregate(steps ~ interval, data, mean)
head(steps_interval)
plot(steps_interval$interval, steps_interval$steps, type='l',
main="Average number of steps taken", xlab="5-min interval",
ylab="Average across all Days", col="rosybrown4")
max_interval <- which.max(data)
max_interval <- which.max(steps_interval$steps)
steps_interval[max_interval]
max_interval <- which.max(steps_interval$steps)
steps_interval[max_interval,]
sum(is.na(data_row))
library(ggplot2)
library(scales)
library(Hmisc)
library(dplyr)
## Loading and preprocessing the data
raw_data <- read.csv("./activity/activity.csv")
# remove NA in data
data <- raw_data[ with (raw_data, { !(is.na(steps)) } ), ]
head(data)
dailysteps <- group_by(data, date)
daily_steps<- summarise(dailysteps, total = sum(steps))
head(daily_steps)
hist(daily_steps$total, main="Total steps per day",
xlab="Number of steps per day", breaks=20, col="rosybrown4")
summary(daily_steps)
mean_daily_steps <- mean(daily_steps$total)
mean_daily_steps
median_daily_steps <- median(daily_steps$total)
median_daily_steps
steps_interval <- aggregate(steps ~ interval, data, mean)
head(steps_interval)
plot(steps_interval$interval, steps_interval$steps, type='l',
main="Average number of steps taken", xlab="5-min interval",
ylab="Average across all Days", col="rosybrown4")
max_interval <- which.max(steps_interval$steps)
steps_interval[max_interval,]
sum(is.na(raw_data))
activityDataImputed$steps <- impute(raw_data$steps, fun=mean)
activityDataImputed <- raw_data
activityDataImputed$steps <- impute(raw_data$steps, fun=mean)
StepsAverage <- aggregate(steps ~ interval, data = raw_data, FUN = mean)
fillNA <- numeric()
for (i in 1:nrow(raw_data)) {
obs <- raw_data[i, ]
if (is.na(obs$steps)) {
steps <- subset(StepsAverage, interval == obs$interval)$steps
} else {
steps <- obs$steps
}
fillNA <- c(fillNA, steps)
}
new_dataset <- raw_data
new_dataset$steps <- fillNA
total_steps_per_day <- aggregate(steps ~ date, data = new_dataset, sum, na.rm = TRUE)
total_steps_per_day <- aggregate(steps ~ date, data = new_dataset, sum, na.rm = TRUE)
hist(total_steps_per_day$steps, main = "Total steps per day", xlab = "day", col = "rosybrown4")
total_steps_per_day <- aggregate(steps ~ date, data = new_dataset, sum, na.rm = TRUE)
hist(total_steps_per_day$steps, main = "Total steps per day", xlab = "day", col = "rosybrown4", breaks=20)
total_steps_per_day <- aggregate(steps ~ date, data = new_dataset, sum, na.rm = TRUE)
hist(total_steps_per_day$steps, main = "Total steps per day", xlab = "day", col = "rosybrown4", breaks=10)
### Mean and Median if the new data set with filled NA's values
mean(total_steps_per_day$steps)
median(total_steps_per_day$steps)
### Mean and Median of the original data set
mean(daily_steps$total)
median(daily_steps$total)
day <- weekdays(raw_data$date)
day <- weekdays(as.Date(raw_data$date))
daylevel <- vector()
for (i in 1:nrow(raw_data)) {
if (day[i] == "Saturday") {
daylevel[i] <- "Weekend"
} else if (day[i] == "Sunday") {
daylevel[i] <- "Weekend"
} else {
daylevel[i] <- "Weekday"
}
}
raw_data$daylevel <- daylevel
raw_data$daylevel <- factor(raw_data$daylevel)
steps_per_day <- aggregate(steps ~ interval + daylevel, data = raw_data, mean)
names(steps_per_day) <- c("interval", "daylevel", "steps")
day <- weekdays(as.Date(raw_data$date))
daylevel <- vector()
for (i in 1:nrow(raw_data)) {
if (day[i] == "Saturday") {
daylevel[i] <- "Weekend"
} else if (day[i] == "Sunday") {
daylevel[i] <- "Weekend"
} else {
daylevel[i] <- "Weekday"
}
}
raw_data$daylevel <- daylevel
raw_data$daylevel <- factor(raw_data$daylevel)
steps_per_day <- aggregate(steps ~ interval + daylevel, data = raw_data, mean)
names(steps_per_day) <- c("interval", "daylevel", "steps")
head(steps_per_day)
xyplot(steps ~ interval | daylevel, stepsByDay, type = "l", layout = c(1, 2),
xlab = "Interval", ylab = "Number of steps")
xyplot(steps ~ interval | daylevel, steps_per_day, type = "l", layout = c(1, 2),
xlab = "Interval", ylab = "Number of steps")
install.packages("lattice")
install.packages("lattice")
library(ggplot2)
library(scales)
library(Hmisc)
xyplot(steps ~ interval | daylevel, steps_per_day, type = "l", layout = c(1, 2),
xlab = "Interval", ylab = "Number of steps")
library(ggplot2)
library(scales)
library(Hmisc)
install.packages(c("backports", "bayestestR", "broom", "callr", "caTools", "cli", "coin", "colorspace", "cowplot", "cpp11", "crayon", "crosstalk", "cubelyr", "data.table", "DBI", "dbplyr", "DescTools", "digest", "dplyr", "DT", "effectsize", "emmeans", "expm", "fansi", "fastmap", "forcats", "Formula", "generics", "ggeffects", "ggplot2", "ggrepel", "ggthemes", "gh", "git2r", "glmnet", "gmp", "gplots", "gtsummary", "HH", "Hmisc", "hms", "htmltools", "htmlwidgets", "httpuv", "insight", "IRdisplay", "isoband", "janitor", "jsonlite", "knitr", "labeling", "Lahman", "lava", "libcoin", "lme4", "lubridate", "magrittr", "matrixStats", "memisc", "memoise", "multcomp", "openxlsx", "parameters", "pbdZMQ", "pbkrtest", "performance", "pillar", "pkgbuild", "processx", "promises", "ps", "psych", "quantreg", "R6", "rappdirs", "raster", "rcompanion", "Rcpp", "RcppArmadillo", "RcppEigen", "recipes", "repr", "reprex", "rlang", "Rmpfr", "rprojroot", "rstudioapi", "sass", "shiny", "sjmisc", "sjPlot", "sjstats", "sp", "SQUAREM", "statmod", "stopwords", "testthat", "tibble", "tiff", "tinytex", "TMB", "usethis", "vctrs", "withr", "xfun"))
install.packages(c("backports", "bayestestR", "broom", "callr", "caTools", "cli", "coin", "colorspace", "cowplot", "cpp11", "crayon", "crosstalk", "cubelyr", "data.table", "DBI", "dbplyr", "DescTools", "digest", "dplyr", "DT", "effectsize", "emmeans", "expm", "fansi", "fastmap", "forcats", "Formula", "generics", "ggeffects", "ggplot2", "ggrepel", "ggthemes", "gh", "git2r", "glmnet", "gmp", "gplots", "gtsummary", "HH", "Hmisc", "hms", "htmltools", "htmlwidgets", "httpuv", "insight", "IRdisplay", "isoband", "janitor", "jsonlite", "knitr", "labeling", "Lahman", "lava", "libcoin", "lme4", "lubridate", "magrittr", "matrixStats", "memisc", "memoise", "multcomp", "openxlsx", "parameters", "pbdZMQ", "pbkrtest", "performance", "pillar", "pkgbuild", "processx", "promises", "ps", "psych", "quantreg", "R6", "rappdirs", "raster", "rcompanion", "Rcpp", "RcppArmadillo", "RcppEigen", "recipes", "repr", "reprex", "rlang", "Rmpfr", "rprojroot", "rstudioapi", "sass", "shiny", "sjmisc", "sjPlot", "sjstats", "sp", "SQUAREM", "statmod", "stopwords", "testthat", "tibble", "tiff", "tinytex", "TMB", "usethis", "vctrs", "withr", "xfun"))
install.packages(c("backports", "bayestestR", "broom", "callr", "caTools", "cli", "coin", "colorspace", "cowplot", "cpp11", "crayon", "crosstalk", "cubelyr", "data.table", "DBI", "dbplyr", "DescTools", "digest", "dplyr", "DT", "effectsize", "emmeans", "expm", "fansi", "fastmap", "forcats", "Formula", "generics", "ggeffects", "ggplot2", "ggrepel", "ggthemes", "gh", "git2r", "glmnet", "gmp", "gplots", "gtsummary", "HH", "Hmisc", "hms", "htmltools", "htmlwidgets", "httpuv", "insight", "IRdisplay", "isoband", "janitor", "jsonlite", "knitr", "labeling", "Lahman", "lava", "libcoin", "lme4", "lubridate", "magrittr", "matrixStats", "memisc", "memoise", "multcomp", "openxlsx", "parameters", "pbdZMQ", "pbkrtest", "performance", "pillar", "pkgbuild", "processx", "promises", "ps", "psych", "quantreg", "R6", "rappdirs", "raster", "rcompanion", "Rcpp", "RcppArmadillo", "RcppEigen", "recipes", "repr", "reprex", "rlang", "Rmpfr", "rprojroot", "rstudioapi", "sass", "shiny", "sjmisc", "sjPlot", "sjstats", "sp", "SQUAREM", "statmod", "stopwords", "testthat", "tibble", "tiff", "tinytex", "TMB", "usethis", "vctrs", "withr", "xfun"))
install.packages(c("backports", "bayestestR", "broom", "callr", "caTools", "cli", "coin", "colorspace", "cowplot", "cpp11", "crayon", "crosstalk", "cubelyr", "data.table", "DBI", "dbplyr", "DescTools", "digest", "dplyr", "DT", "effectsize", "emmeans", "expm", "fansi", "fastmap", "forcats", "Formula", "generics", "ggeffects", "ggplot2", "ggrepel", "ggthemes", "gh", "git2r", "glmnet", "gmp", "gplots", "gtsummary", "HH", "Hmisc", "hms", "htmltools", "htmlwidgets", "httpuv", "insight", "IRdisplay", "isoband", "janitor", "jsonlite", "knitr", "labeling", "Lahman", "lava", "libcoin", "lme4", "lubridate", "magrittr", "matrixStats", "memisc", "memoise", "multcomp", "openxlsx", "parameters", "pbdZMQ", "pbkrtest", "performance", "pillar", "pkgbuild", "processx", "promises", "ps", "psych", "quantreg", "R6", "rappdirs", "raster", "rcompanion", "Rcpp", "RcppArmadillo", "RcppEigen", "recipes", "repr", "reprex", "rlang", "Rmpfr", "rprojroot", "rstudioapi", "sass", "shiny", "sjmisc", "sjPlot", "sjstats", "sp", "SQUAREM", "statmod", "stopwords", "testthat", "tibble", "tiff", "tinytex", "TMB", "usethis", "vctrs", "withr", "xfun"))
library(ggplot2)
library(scales)
library(dplyr)
library(lattice)
## Loading and preprocessing the data
raw_data <- read.csv("./activity/activity.csv")
# remove NA in data
data <- raw_data[ with (raw_data, { !(is.na(steps)) } ), ]
head(data)
dailysteps <- group_by(data, date)
daily_steps<- summarise(dailysteps, total = sum(steps))
head(daily_steps)
hist(daily_steps$total, main="Total steps per day",
xlab="Number of steps per day", breaks=20, col="rosybrown4")
summary(daily_steps)
mean_daily_steps <- mean(daily_steps$total)
mean_daily_steps
median_daily_steps <- median(daily_steps$total)
median_daily_steps
steps_interval <- aggregate(steps ~ interval, data, mean)
head(steps_interval)
plot(steps_interval$interval, steps_interval$steps, type='l',
main="Average number of steps taken", xlab="5-min interval",
ylab="Average across all Days", col="rosybrown4")
max_interval <- which.max(steps_interval$steps)
steps_interval[max_interval,]
### total number of missing values in the raw dataset
sum(is.na(raw_data))
StepsAverage <- aggregate(steps ~ interval, data = raw_data, FUN = mean)
fillNA <- numeric()
for (i in 1:nrow(raw_data)) {
obs <- raw_data[i, ]
if (is.na(obs$steps)) {
steps <- subset(StepsAverage, interval == obs$interval)$steps
} else {
steps <- obs$steps
}
fillNA <- c(fillNA, steps)
}
new_dataset <- raw_data
new_dataset$steps <- fillNA
total_steps_per_day <- aggregate(steps ~ date, data = new_dataset, sum, na.rm = TRUE)
hist(total_steps_per_day$steps, main = "Total steps per day", xlab = "day", col = "rosybrown4", breaks=10)
### Mean and Median if the new data set with filled NA's values
mean(total_steps_per_day$steps)
median(total_steps_per_day$steps)
### Mean and Median of the original data set
mean(daily_steps$total)
median(daily_steps$total)
day <- weekdays(as.Date(raw_data$date))
daylevel <- vector()
for (i in 1:nrow(raw_data)) {
if (day[i] == "Saturday") {
daylevel[i] <- "Weekend"
} else if (day[i] == "Sunday") {
daylevel[i] <- "Weekend"
} else {
daylevel[i] <- "Weekday"
}
}
raw_data$daylevel <- daylevel
raw_data$daylevel <- factor(raw_data$daylevel)
steps_per_day <- aggregate(steps ~ interval + daylevel, data = raw_data, mean)
names(steps_per_day) <- c("interval", "daylevel", "steps")
head(steps_per_day)
xyplot(steps ~ interval | daylevel, steps_per_day, type = "l", layout = c(1, 2),
xlab = "Interval", ylab = "Number of steps")
View(steps_per_day)
day <- weekdays(raw_data$date)
day <- weekdays(new_dataset$date)
day <- weekdays(raw_data$date)
day <- weekdays(as.Date(raw_data$date))
daylevel <- vector()
for (i in 1:nrow(raw_data)) {
if (day[i] == "Saturday") {
daylevel[i] <- "Weekend"
} else if (day[i] == "Sunday") {
daylevel[i] <- "Weekend"
} else {
daylevel[i] <- "Weekday"
}
}
raw_data$daylevel <- daylevel
raw_data$daylevel <- factor(raw_data$daylevel)
stepsByDay <- aggregate(steps ~ interval + daylevel, data = raw_data, mean)
names(stepsByDay) <- c("interval", "daylevel", "steps")
head(steps_per_day)
View(steps_per_day)
data_imputed <- raw_data
for (i in 1:nrow(data_imputed)) {
if (is.na(data_imputed$steps[i])) {
interval_value <- data_imputed$interval[i]
steps_value <- steps_interval[
steps_interval$interval == interval_value,]
data_imputed$steps[i] <- steps_value$steps
}
}
total_steps_per_day <- aggregate(steps ~ date, data = data_imputed, sum, na.rm = TRUE)
hist(total_steps_per_day$steps, main = "Total steps per day", xlab = "day", col = "rosybrown4", breaks=10)
data_imputed["day_of_week"] <- weekdays(as.Date(data_imputed$date))
data_imputed$day_of_week[data_imputed$day_of_week  %in% c('Saturday','Sunday') ] <- "weekend"
data_imputed$day_of_week[data_imputed$day_of_week != "weekend"] <- "weekday"
# convert type_of_day from character to factor
data_imputed$day_of_week <- as.factor(data_imputed$day_of_week)
# convert type_of_day from character to factor
data_imputed$day_of_week <- as.factor(data_imputed$day_of_week)
# calculate average steps by interval across all days
steps_interval_dfimp <- aggregate(steps ~ interval + day_of_week, data_imputed, mean)
# creat a plot
qplot(interval,
steps,
data = steps_interval_dfimp,
type = 'l',
geom=c("line"),
xlab = "Interval",
ylab = "Number of steps",
main = "") +
facet_wrap(~ day_of_week, ncol = 1)
library(Hmisc)
library(ggplot2)
library(scales)
library(dplyr)
library(lattice)
library(Hmisc)
library(ggplot2)
library(scales)
library(dplyr)
library(lattice)
## Loading and preprocessing the data
raw_data <- read.csv("./activity/activity.csv")
# remove NA in data
data <- raw_data[ with (raw_data, { !(is.na(steps)) } ), ]
head(data)
dailysteps <- group_by(data, date)
daily_steps<- summarise(dailysteps, total = sum(steps))
head(daily_steps)
hist(daily_steps$total, main="Total steps per day",
xlab="Number of steps per day", breaks=20, col="rosybrown4")
summary(daily_steps)
mean_daily_steps <- mean(daily_steps$total)
mean_daily_steps
median_daily_steps <- median(daily_steps$total)
median_daily_steps
steps_interval <- aggregate(steps ~ interval, data, mean)
head(steps_interval)
plot(steps_interval$interval, steps_interval$steps, type='l',
main="Average number of steps taken", xlab="5-min interval",
ylab="Average across all Days", col="rosybrown4")
max_interval <- which.max(steps_interval$steps)
steps_interval[max_interval,]
### total number of missing values in the raw dataset
sum(is.na(raw_data))
data_imputed <- raw_data
for (i in 1:nrow(data_imputed)) {
if (is.na(data_imputed$steps[i])) {
interval_value <- data_imputed$interval[i]
steps_value <- steps_interval[
steps_interval$interval == interval_value,]
data_imputed$steps[i] <- steps_value$steps
}
}
total_steps_per_day <- aggregate(steps ~ date, data = data_imputed, sum, na.rm = TRUE)
hist(total_steps_per_day$steps, main = "Total steps per day", xlab = "day", col = "rosybrown4", breaks=10)
### Mean and Median if the new data set with filled NA's values
mean(total_steps_per_day$steps)
median(total_steps_per_day$steps)
### Mean and Median of the original data set
mean(daily_steps$total)
median(daily_steps$total)
data_imputed["day_of_week"] <- weekdays(as.Date(data_imputed$date))
data_imputed$day_of_week[data_imputed$day_of_week  %in% c('Saturday','Sunday') ] <- "weekend"
data_imputed$day_of_week[data_imputed$day_of_week != "weekend"] <- "weekday"
# convert type_of_day from character to factor
data_imputed$day_of_week <- as.factor(data_imputed$day_of_week)
# calculate average steps by interval across all days
steps_interval_dfimp <- aggregate(steps ~ interval + day_of_week, data_imputed, mean)
# creat a plot
qplot(interval,
steps,
data = steps_interval_dfimp,
type = 'l',
geom=c("line"),
xlab = "Interval",
ylab = "Number of steps",
main = "") +
facet_wrap(~ day_of_week, ncol = 1)
library(Hmisc)
library(ggplot2)
library(scales)
library(dplyr)
library(lattice)
unlink('Assigment_cache', recursive = TRUE)
knit_with_parameters('~/GitHub/CourseraRepo/RepData_PeerAssessment1/Assigment.Rmd')
install.packages(c("colorspace", "data.table", "digest", "dplyr", "fansi", "htmltools", "jsonlite", "pbdZMQ", "rlang", "Rmpfr", "tibble", "vctrs", "xfun"))
install.packages(c("colorspace", "data.table", "digest", "dplyr", "fansi", "htmltools", "jsonlite", "pbdZMQ", "rlang", "Rmpfr", "tibble", "vctrs", "xfun"))
library(Hmisc)
library(ggplot2)
library(scales)
library(dplyr)
library(lattice)
## Loading and preprocessing the data
raw_data <- read.csv("./activity/activity.csv")
# remove NA in data
data <- raw_data[ with (raw_data, { !(is.na(steps)) } ), ]
head(data)
dailysteps <- group_by(data, date)
daily_steps<- summarise(dailysteps, total = sum(steps))
head(daily_steps)
hist(daily_steps$total, main="Total steps per day",
xlab="Number of steps per day", breaks=20, col="rosybrown4")
summary(daily_steps)
mean_daily_steps <- mean(daily_steps$total)
mean_daily_steps
median_daily_steps <- median(daily_steps$total)
median_daily_steps
steps_interval <- aggregate(steps ~ interval, data, mean)
head(steps_interval)
plot(steps_interval$interval, steps_interval$steps, type='l',
main="Average number of steps taken", xlab="5-min interval",
ylab="Average across all Days", col="rosybrown4")
max_interval <- which.max(steps_interval$steps)
steps_interval[max_interval,]
### total number of missing values in the raw dataset
sum(is.na(raw_data))
data_imputed <- raw_data
for (i in 1:nrow(data_imputed)) {
if (is.na(data_imputed$steps[i])) {
interval_value <- data_imputed$interval[i]
steps_value <- steps_interval[
steps_interval$interval == interval_value,]
data_imputed$steps[i] <- steps_value$steps
}
}
total_steps_per_day <- aggregate(steps ~ date, data = data_imputed, sum, na.rm = TRUE)
hist(total_steps_per_day$steps, main = "Total steps per day", xlab = "day", col = "rosybrown4", breaks=10)
### Mean and Median if the new data set with filled NA's values
mean(total_steps_per_day$steps)
median(total_steps_per_day$steps)
### Mean and Median of the original data set
mean(daily_steps$total)
median(daily_steps$total)
data_imputed["day_of_week"] <- weekdays(as.Date(data_imputed$date))
data_imputed$day_of_week[data_imputed$day_of_week  %in% c('Saturday','Sunday') ] <- "weekend"
data_imputed$day_of_week[data_imputed$day_of_week != "weekend"] <- "weekday"
# convert type_of_day from character to factor
data_imputed$day_of_week <- as.factor(data_imputed$day_of_week)
# calculate average steps by interval across all days
steps_interval_dfimp <- aggregate(steps ~ interval + day_of_week, data_imputed, mean)
# creat a plot
qplot(interval,
steps,
data = steps_interval_dfimp,
type = 'l',
geom=c("line"),
xlab = "Interval",
ylab = "Number of steps",
main = "") +
facet_wrap(~ day_of_week, ncol = 1)
